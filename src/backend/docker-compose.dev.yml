version: "3.8"

services:
  api_gateway:
    build:
      context: ./
      dockerfile: Dockerfile.dev
    ports:
      - "8000:8000"  # Application port
      - "5678:5678"  # Debug port
    environment:
      - SERVICE_NAME=api_gateway
      - PORT=8000
      - LOG_LEVEL=debug
      - DEBUGPY_PORT=5678
      - DEBUGPY_ADDRESS=0.0.0.0
      - REDIS_URL=redis://development@redis:6379/0
      - POSTGRES_DSN=postgresql://development:development@postgres:5432/art_knowledge_graph_dev
    volumes:
      - .:/app
      - ./logs:/app/logs
    depends_on:
      - auth_service
      - data_processor
      - graph_service
    networks:
      - backend
    restart: unless-stopped
    command: ["python", "-m", "debugpy", "--listen", "0.0.0.0:5678", "api_gateway/main.py"]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  auth_service:
    build:
      context: ./
      dockerfile: Dockerfile.dev
    ports:
      - "8001:8001"
      - "5679:5678"
    environment:
      - SERVICE_NAME=auth_service
      - PORT=8001
      - LOG_LEVEL=debug
      - DEBUGPY_PORT=5678
      - DEBUGPY_ADDRESS=0.0.0.0
      - REDIS_URL=redis://development@redis:6379/1
      - POSTGRES_DSN=postgresql://development:development@postgres:5432/art_knowledge_graph_dev
      - JWT_SECRET_KEY=development_secret_key
      - JWT_ALGORITHM=HS256
    volumes:
      - .:/app
      - ./logs:/app/logs
    depends_on:
      - postgres
      - redis
    networks:
      - backend
    restart: unless-stopped
    command: ["python", "-m", "debugpy", "--listen", "0.0.0.0:5678", "auth_service/main.py"]

  data_processor:
    build:
      context: ./
      dockerfile: Dockerfile.dev
    ports:
      - "8002:8002"
      - "5680:5678"
    environment:
      - SERVICE_NAME=data_processor
      - PORT=8002
      - LOG_LEVEL=debug
      - DEBUGPY_PORT=5678
      - DEBUGPY_ADDRESS=0.0.0.0
      - POSTGRES_DSN=postgresql://development:development@postgres:5432/art_knowledge_graph_dev
      - ML_MODEL_PATH=/app/models
      - AWS_ACCESS_KEY_ID=development
      - AWS_SECRET_ACCESS_KEY=development
      - S3_BUCKET=art-knowledge-graph-dev
    volumes:
      - .:/app
      - ./logs:/app/logs
      - ml_models:/app/models
    depends_on:
      - postgres
    networks:
      - backend
    restart: unless-stopped
    command: ["python", "-m", "debugpy", "--listen", "0.0.0.0:5678", "data_processor/main.py"]

  graph_service:
    build:
      context: ./
      dockerfile: Dockerfile.dev
    ports:
      - "8003:8003"
      - "5681:5678"
    environment:
      - SERVICE_NAME=graph_service
      - PORT=8003
      - LOG_LEVEL=debug
      - DEBUGPY_PORT=5678
      - DEBUGPY_ADDRESS=0.0.0.0
      - NEO4J_URI=bolt://neo4j:7687
      - NEO4J_USER=neo4j
      - NEO4J_PASSWORD=development
      - REDIS_URL=redis://development@redis:6379/2
    volumes:
      - .:/app
      - ./logs:/app/logs
    depends_on:
      - neo4j
      - redis
    networks:
      - backend
    restart: unless-stopped
    command: ["python", "-m", "debugpy", "--listen", "0.0.0.0:5678", "graph_service/main.py"]

  neo4j:
    image: neo4j:5.0
    ports:
      - "7687:7687"  # Bolt protocol
      - "7474:7474"  # HTTP interface
    environment:
      - NEO4J_AUTH=neo4j/development
      - NEO4J_dbms_memory_heap_max__size=2G
      - NEO4J_dbms_memory_pagecache_size=1G
      - NEO4J_ACCEPT_LICENSE_AGREEMENT=yes
      - NEO4J_dbms_connector_bolt_advertised__address=localhost:7687
    volumes:
      - neo4j_data:/data
      - neo4j_logs:/logs
    networks:
      - backend
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:7474 || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  postgres:
    image: postgres:15
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=development
      - POSTGRES_PASSWORD=development
      - POSTGRES_DB=art_knowledge_graph_dev
      - POSTGRES_HOST_AUTH_METHOD=trust
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d
    networks:
      - backend
    restart: unless-stopped
    command: 
      - "postgres"
      - "-c"
      - "shared_buffers=256MB"
      - "-c"
      - "max_connections=100"
      - "-c"
      - "work_mem=16MB"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U development"]
      interval: 30s
      timeout: 10s
      retries: 3

  redis:
    image: redis:7.0
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --requirepass development
    volumes:
      - redis_data:/data
    networks:
      - backend
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "development", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  neo4j_data:
    driver: local
  neo4j_logs:
    driver: local
  postgres_data:
    driver: local
  redis_data:
    driver: local
  ml_models:
    driver: local

networks:
  backend:
    driver: bridge