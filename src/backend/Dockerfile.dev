# Use Python 3.11 slim as base image
FROM python:3.11-slim

# Set environment variables
ENV PYTHONDONTWRITEBYTECODE=1 \
    PYTHONUNBUFFERED=1 \
    POETRY_VERSION=1.7.0 \
    POETRY_HOME=/opt/poetry \
    POETRY_VIRTUALENVS_IN_PROJECT=true \
    POETRY_NO_INTERACTION=1 \
    POETRY_CACHE_DIR=/opt/poetry/cache \
    DEBUGPY_PORT=5678 \
    DEBUGPY_ADDRESS=0.0.0.0 \
    PYTHONPATH=/app \
    DEVELOPMENT_MODE=true \
    WATCHFILES_FORCE_POLLING=true

# Set working directory
WORKDIR /app

# Install system dependencies with layer optimization
RUN apt-get update && \
    apt-get install -y --no-install-recommends \
    build-essential \
    curl \
    git \
    python3-dev \
    procps \
    libpq-dev && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/*

# Install Poetry with version pinning and caching
RUN curl -sSL https://install.python-poetry.org | python3 - && \
    ln -s /opt/poetry/bin/poetry /usr/local/bin/poetry && \
    poetry config virtualenvs.in-project true && \
    poetry config cache-dir /opt/poetry/cache

# Copy dependency files
COPY pyproject.toml poetry.lock* ./
COPY requirements.txt ./

# Install dependencies with Poetry, fallback to pip if needed
RUN if [ -f poetry.lock ]; then \
        poetry install --no-root --with dev; \
    else \
        pip install --no-cache-dir -r requirements.txt; \
    fi

# Install development tools including debugger
RUN poetry add debugpy watchfiles

# Create necessary directories and set permissions
RUN mkdir -p /app/logs /app/data && \
    chmod -R 777 /app/logs /app/data

# Copy application code
COPY . .

# Expose ports for application and debugger
EXPOSE 8000-8003 5678

# Create debug launch script
RUN echo '#!/bin/sh\n\
python -m debugpy --listen 0.0.0.0:5678 --wait-for-client -m uvicorn art_knowledge_graph.main:app --host 0.0.0.0 --port 8000 --reload' > /usr/local/bin/debug && \
    chmod +x /usr/local/bin/debug

# Set default command for development with debug support
CMD ["debug"]