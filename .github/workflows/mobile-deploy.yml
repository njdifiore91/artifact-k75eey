name: Mobile Deployment

on:
  workflow_run:
    workflows: ['Android Build', 'iOS Build']
    types: [completed]
    branches: [main]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'production'

# Prevent concurrent deployments
concurrency:
  group: mobile-deploy-${{ github.ref }}
  cancel-in-progress: false

env:
  GOOGLE_PLAY_JSON_KEY: ${{ secrets.GOOGLE_PLAY_JSON_KEY }}
  APPLE_API_KEY: ${{ secrets.APPLE_API_KEY }}
  APPLE_API_ISSUER: ${{ secrets.APPLE_API_ISSUER }}
  MATCH_PASSWORD: ${{ secrets.MATCH_PASSWORD }}
  HEALTH_CHECK_TOKEN: ${{ secrets.HEALTH_CHECK_TOKEN }}
  DEPLOYMENT_NOTIFICATION_URL: ${{ secrets.DEPLOYMENT_NOTIFICATION_URL }}
  ROLLBACK_THRESHOLD: 5
  HEALTH_CHECK_INTERVAL: 30

jobs:
  validate:
    name: Validate Deployment Prerequisites
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Verify build artifacts
        run: |
          if [[ "${{ github.event.workflow_run.conclusion }}" != "success" ]]; then
            echo "Previous build workflow failed"
            exit 1
          fi

      - name: Check deployment quota
        run: |
          # Verify we haven't exceeded deployment limits
          DEPLOYMENTS_TODAY=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/deployments" | jq length)
          if [ "$DEPLOYMENTS_TODAY" -gt 5 ]; then
            echo "Daily deployment quota exceeded"
            exit 1
          fi

  approval:
    name: Manual Deployment Approval
    needs: validate
    runs-on: ubuntu-latest
    environment: production
    timeout-minutes: 60
    steps:
      - name: Await approval
        run: echo "Deployment approved for production"

  deploy-ios:
    name: Deploy iOS Application
    needs: approval
    runs-on: macos-latest
    timeout-minutes: 60
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.0'
          bundler-cache: true

      - name: Download iOS artifacts
        uses: actions/download-artifact@v3
        with:
          name: ios-build
          path: ios-artifacts

      - name: Configure iOS certificates
        env:
          MATCH_PASSWORD: ${{ secrets.MATCH_PASSWORD }}
        run: |
          cd src/ios
          bundle install
          bundle exec fastlane sync_certificates

      - name: Deploy to TestFlight (Blue)
        run: |
          cd src/ios
          bundle exec fastlane deploy_to_testflight \
            version:${{ github.run_number }} \
            build_number:${{ github.run_number }}

      - name: Run iOS health checks
        id: ios-health
        run: |
          for i in {1..5}; do
            sleep ${{ env.HEALTH_CHECK_INTERVAL }}
            HEALTH_STATUS=$(curl -s "${{ env.HEALTH_CHECK_URL }}/ios")
            if [ "$HEALTH_STATUS" != "healthy" ]; then
              echo "::set-output name=status::unhealthy"
              exit 1
            fi
          done
          echo "::set-output name=status::healthy"

      - name: Deploy to App Store
        if: steps.ios-health.outputs.status == 'healthy'
        run: |
          cd src/ios
          bundle exec fastlane deploy_to_app_store \
            skip_metadata:true \
            skip_screenshots:true

      - name: Rollback iOS deployment
        if: failure()
        run: |
          cd src/ios
          bundle exec fastlane rollback_release

  deploy-android:
    name: Deploy Android Application
    needs: approval
    runs-on: ubuntu-latest
    timeout-minutes: 60
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Download Android artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-artifacts
          path: android-artifacts

      - name: Setup Google Play credentials
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GOOGLE_PLAY_JSON_KEY }}

      - name: Deploy to Internal Testing (Blue)
        uses: azure/k8s-deploy@v4
        with:
          namespace: 'production'
          manifests: |
            k8s/android-blue.yaml
          images: |
            ${{ env.REGISTRY }}/${{ env.IMAGE }}:${{ github.sha }}

      - name: Run Android health checks
        id: android-health
        run: |
          for i in {1..5}; do
            sleep ${{ env.HEALTH_CHECK_INTERVAL }}
            HEALTH_STATUS=$(curl -s "${{ env.HEALTH_CHECK_URL }}/android")
            if [ "$HEALTH_STATUS" != "healthy" ]; then
              echo "::set-output name=status::unhealthy"
              exit 1
            fi
          done
          echo "::set-output name=status::healthy"

      - name: Promote to Production
        if: steps.android-health.outputs.status == 'healthy'
        run: |
          bundle exec fastlane android deploy_to_play_store \
            track:production \
            aab:android-artifacts/app-release.aab \
            json_key:${{ env.GOOGLE_PLAY_JSON_KEY }}

      - name: Rollback Android deployment
        if: failure()
        run: |
          bundle exec fastlane android rollback_to_previous_version

  notify:
    name: Send Deployment Notifications
    needs: [deploy-ios, deploy-android]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Notify deployment status
        run: |
          DEPLOY_STATUS="${{ needs.deploy-ios.result == 'success' && needs.deploy-android.result == 'success' && 'success' || 'failure' }}"
          curl -X POST ${{ env.DEPLOYMENT_NOTIFICATION_URL }} \
            -H "Content-Type: application/json" \
            -d "{\"status\":\"$DEPLOY_STATUS\",\"version\":\"${{ github.run_number }}\"}"